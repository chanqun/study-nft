{\rtf1\ansi\ansicpg949\cocoartf2580
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 //compiler version for solidity\
pragma solidity ^0.8.4;\
// ^ the uptick arrow defines a frange compile version after the non zero\
// digit upwards to the next invrement of the non zero number\
\
/*\
Solidity programming is the primary code language\
currently used for implementing smart contracts.\
Developed on the Ethereum platform,\
Solidity allows programmers to write smart contracts and\
blockchain dApps.\
*/\
\
// the very first step to write a smart contract\
// in solidity everythin is explicity delclared\
contract CryptoToken \{\
    \
    //what if we want to store addresses and then give each address a specific\
    //number or index?? - the solution is mapping\
    \
    //mapping: acts like a dictionary to store data\
    //mapping(key => value) public mapName\
    \
    mapping(address => uint) public balances;\
    \
    //we only want the msg.sender (th current caller)\
    //to be able to mint tokens\
    \
    address public minter;\
    \
    //Events allow clients to react to specific contract\
    //changes that you declare (one way loggin of transactions)\
    //types of events : Sent Transfer allow\
    \
    //preconditioned arguments (inputs) we should pass\
    event Sent(address from, address to, uint amount);\
    \
    //Build a minting function to mint tokens\
    \
    function mint(address receiver, uint amount) public \{\
        // i want to make sure that only person who can mint\
        // tokens is the owner of this contract\
        \
        //requirement method in solidity\
        \
        //requires check the truthiness equivalency within its paranthesis\
        require(msg.sender == minter);\
        \
        //sets the amount to a specific address\
        balances[receiver] += amount;\
    \}\
    \
    function send(address receiver, uint amount) public \{\
        balances[msg.sender] -= amount;\
        balances[receiver] += amount;\
        emit Sent(msg.sender, receiver, amount);\
    \}\
    \
    \
    // all the code to write smart contract go in here\
    // objects in programming are an abstract datatype\
    // with the ability for inheritance\
    \
    //uint public tokens = 4000000;\
    \
    //uint private totalSupply = 7;\
    //address public sender;    \
    \
    // mission : we want our CryptoToken to mint tokens\
    // we want a datatype for storing integers (tokens)\
    \
    // it can mint tokens\
    \
    constructor() \{\
        minter = msg.sender;\
    \}\
\}\
\
// // create a contract called LearningSolidity    \
// contract LearningSolidity \{\
    \
// \}\
\
}